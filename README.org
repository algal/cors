CORS

* what 

This is a Jenkins plugin that enables CORS.

CORS allows a server to tell browsers that they are allowed to
initiate cross-origin resource requests to that server. Normally, if
your browser is visiting foo.com, JavaScript from foo.com can't directly
launch HTTP requests to bar.com. With CORS, the website at bar.com can
signal that such requests are okay. This is all explained at
http://enable-cors.org or via the spec itself at
http://www.w3.org/TR/cors/.

* why

Why does this matter for Jenkins? Jenkins presents a REST API for
programatically browsing jobs, triggering builds, etc.. Suppose you
want to use this API to present a streamlined interface to Jenkins,
for instance, a webpage YourNiceJenkinsUI.com that is only used for
triggering a particular build. To do this, your webpage must talk to
the Jenkins's REST API. To do this (if your streamlined webpage is
just HTML/JS) then the JS on your webpage needs to be able to talk to
your instance of Jenkins at YourJenkinsUI.com. And to do this, you
need to setup CORS on your Jenkins so that it can tell browsers that
it is happy to receive traffic that started from
YourNiceUI.com. That's where this plugin comes in.

Are there other ways? Yes. Instead of enabling CORS on Jekins, there's
also JSON-P. But it has various limitations. It complicates your
client-side JS, provides worse error-handling, and cannot be used for
certain kinds of requests. For instance, it cannot be used for http
Basic Access-authenticated POST requests, which Jenkins requires for
parameterized builds. That might not be good enough.

Or, if your Jenkins is being run under some other server, like Apache
or nginx, then you could enable CORS within that server. Or, you could
setup a reverse proxy at the domain of your streamlined webpage, so
that your JS talks to that page (on the same-origin), and then the
server relays the traffic to Jenkins.

But if you're running Jenkins using its own embedded server, and don't
want to add new bits of kit to your stack, then this plugin should
work.

* how

This plugin relies on a plain old Java servlet filter that implements
CORS. This servlet filter was adapted from the servlet filter that
ships with the Jetty web server. It seems to be a correct
implementation of the spec.

* things that are working

The class CrossOriginFilter provides a correct CORS implementation (I
believe). The FilterConfigWrapper class provides a way to push
configuration values into that servlet filter. The .jelly files
provide the UI for all the fields a user might need in order to
configure CORS as they desire.

* things that are broken, or questionable

Broken. Jenkins is not correctly rendering the html help files associated with
each of the configuration variables.

Questionable. This plugin just adds a servlet filter to the chain of
servlet filters that Jenkins uses. It does not control where this
filter is inserted in the chain. If an earlier filter blocks traffic
before it reaches this plugin's filter, then that will break things.

* useful links

  CORS intro:
  http://enable-cors.org

  CORS spec:
  http://www.w3.org/TR/cors/

* two CORS implementations as Java ServletFilters

  cors servlet filter in jetty at 
  http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/CrossOriginFilter.java
   
  another cors implementation at:
  https://bitbucket.org/thetransactioncompany/cors-filter/src/5bfb60adfde5f530ed1c7d497bc6283267602410/src/main/java/com/thetransactioncompany/cors/CORSFilter.java?at=master


  Notes:

  - neither implementation calculates the default port based on the
    scheme when URL port is unspecified

    By not doing so, they are both susceptible to failed origin
    matches when, e.g., the server's whitelist incorrectly specifies
    the default port. This is essentially a problem of not checking
    inputs to ensure origins have been correctly canonicalized.

  The TransasctionCompany version is much bigger but seems more
  full-featured in a few respects:

  - it tags requests to expose their CORS status to downstream
    processors
  - permits only requests listing a single origin, which fits the most
    recent version of the spec
  - lots of precondition checks
  - fine-grained exceptions to signal error conditions
  - (it seems) incorrectly applies IDNA canonicalization to the origin
    sent from the client, where it is really needed for the origin
    supplied by the user as a server configuration. We assume
    conforming clients apply IDNA canonicalization themselves. But an
    unaware user might quite easily incorrectly put a
    non-canonicalized URL into the list of allowed origins, not
    understanding the canonicalization requirement.

  The Jetty version has some bugs:
  - doesn't clear allowExposedHeaders on destroy()
  - defaults to chaining preflight requests (?!)
  - accepts lists of origins from the client.

  I have corrected some of the Jetty's verions bugs.
