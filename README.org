CORS

* what 

This is a Jenkins plugin that enables CORS.

CORS allows a server to tell browsers that they are allowed to
initiate cross-origin resource requests to that server. Normally, if
your browser is visiting foo.com, JavaScript from foo.com can't directly
launch HTTP requests to bar.com. With CORS, the website at bar.com can
signal that such requests are okay. This is all explained at
http://enable-cors.org or via the spec itself at
http://www.w3.org/TR/cors/.

* why

Why does this matter for Jenkins? Jenkins presents a REST API for
programatically browsing jobs, triggering builds, etc.. Suppose you
want to use this API to present a streamlined interface to Jenkins,
for instance, a webpage YourNiceJenkinsUI.com that is only used for
triggering a particular build. To do this, your webpage must talk to
Jenkins's REST API. To do this (if your streamlined webpage is just
HTML/JS) then the JS on your webpage needs to be able to talk to your
instance of Jenkins at YourJenkinsUI.com. And to do this, you need to
setup CORS on your Jenkins so that it can tell browsers that it is
happy to receive traffic that started from YourNiceUI.com. That's
where this plugin comes in.

Are there other ways? Yes. Instead of enabling CORS on Jekins, there's
also JSON-P. But it has various limitations. It complicates your
client-side JS, provides worse error-handling, and can be used for
certain kinds of requests (e.g., authenticated POST requests, which
are needed for parameterized builds), etc..

* how

This plugin relies on a plain old Java servlet filter that implements
CORS. This servlet filter was adapted from the servlet filter that
ships with the Jetty web server. It seems to be a correct
implementation of the spec.

* things that are working

The class CrossOriginFilter provides a correct CORS implementation (I
believe). The FilterConfigWrapper class provides a way to push
configuration values into that servlet filter. The .jelly files
provide the UI for all the fields a user might need in order to
configure CORS as they desire.

* the  one thing that is broken

However, the basic thing I don't understand is:
- how to make Jenkins correctly wrap the Plugin object in a PluginWrapper

- how to make Jenkins populate the .jelly file fields with the values
  from the plugin's properties. Perhaps the plugin needs a descriptor?

This requires more knowledge about Jenkins's plugin system than is
easy to extract from Jenkins documentation system.

* useful links

  CORS intro:
  http://enable-cors.org

  CORS spec:
  http://www.w3.org/TR/cors/

* two CORS implementations as Java ServletFilters

  cors servlet filter in jetty at 
  http://git.eclipse.org/c/jetty/org.eclipse.jetty.project.git/tree/jetty-servlets/src/main/java/org/eclipse/jetty/servlets/CrossOriginFilter.java
   
  another cors implementation at:
  https://bitbucket.org/thetransactioncompany/cors-filter/src/5bfb60adfde5f530ed1c7d497bc6283267602410/src/main/java/com/thetransactioncompany/cors/CORSFilter.java?at=master


  Notes:

  - neither implementation calculates the default port based on the
    scheme when URL port is unspecified

    by not doing so, they are both susceptible to failed origin
    matches when, e.g., the client specifies the default port
    explicitly, and the server's whitelist omits it, or vice versa.

  The TransasctionCompany version is much bigger but seems more
  full-featured in a few respects:

  - it tags requests to expose their CORS status to downstream
    processors
  - permits only requests listing a single origin, which fits the most
    recent version of the spec
  - lots of precondition checks
  - fine-grained exceptions
  - (it seems) incorrectly applies IDNA canonicalization to the origin
    sent from the client, where it really needed for the origin
    supplied by the user as a server configuration. We assume clients
    apply IDNA canonicalization themselves.

  The Jetty version has some bugs:
  - doesn't clear allowExposedHeaders on destroy()
  - defaults to chaining preflight requests (?!)
  - accepts lists of origins from the client.

